// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider     = "postgresql"
    url          = env("DATABASE_URL")
    directUrl    = env("DIRECT_URL")
    relationMode = "prisma"
}

// Necessary for Next auth
model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? // @db.Text
    access_token      String? // @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? // @db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
    @@index([userId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@index([userId])
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

enum EngagementType {
    LIKE
    DISLIKE
    VIEW
    SAVE
    FOLLOW
}

model User {
    id                     String                   @id @default(cuid())
    name                   String?
    email                  String?                  @unique
    emailVerified          DateTime?
    image                  String?
    backgroundImage        String?                  @db.Text
    handle                 String?                  @unique
    description            String?                  @db.Text
    accounts               Account[]
    sessions               Session[]
    videos                 Video[]
    VideoEngagement        VideoEngagement[]
    Comment                Comment[]
    Announcement           Announcement[]
    AnnouncementEngagement AnnouncementEngagement[]
    followers              FollowEngagement[]       @relation("Followings")
    followings             FollowEngagement[]       @relation("Followers")
    Playlist               Playlist[]
}

model Video {
    id           String   @id @default(cuid())
    title        String   @db.Text
    description  String   @db.Text
    thumbnailUrl String   @db.Text
    videoUrl     String   @db.Text
    publish      Boolean  @default(true)
    userId       String
    createdAt    DateTime @default(now())
    updateAt     DateTime @updatedAt

    user             User               @relation(fields: [userId], references: [id], onDelete: Cascade)
    VideoEngagement  VideoEngagement[]
    Comment          Comment[]
    PlaylistHasVideo PlaylistHasVideo[]

    @@index([userId])
}

model VideoEngagement {
    id             String         @id @default(cuid())
    userId         String?
    videoId        String?
    createdAt      DateTime       @default(now())
    updateAt       DateTime       @updatedAt
    engagementType EngagementType

    user  User?  @relation(fields: [userId], references: [id], onDelete: Cascade)
    video Video? @relation(fields: [videoId], references: [id], onDelete: Cascade)

    @@index([userId])
    @@index([videoId])
}

model Comment {
    id        String   @id @default(cuid())
    message   String?  @db.Text
    videoId   String
    userId    String
    createdAt DateTime @default(now())
    updateAt  DateTime @updatedAt

    user  User  @relation(fields: [userId], references: [id], onDelete: Cascade)
    video Video @relation(fields: [videoId], references: [id], onDelete: Cascade)

    @@index([userId])
    @@index([videoId])
}

model Announcement {
    id        String   @id @default(cuid())
    message   String   @db.Text
    userId    String
    createdAt DateTime @default(now())

    user                   User                     @relation(fields: [userId], references: [id], onDelete: Cascade)
    AnnouncementEngagement AnnouncementEngagement[]

    @@index([userId])
}

model AnnouncementEngagement {
    userId         String
    announcementId String
    engagementType EngagementType
    createdAt      DateTime       @default(now())
    updateAt       DateTime       @updatedAt

    user         User         @relation(fields: [userId], references: [id], onDelete: Cascade)
    announcement Announcement @relation(fields: [announcementId], references: [id], onDelete: Cascade)

    @@id([userId, announcementId])
    @@index([userId])
    @@index([announcementId])
}

model FollowEngagement {
    followerId     String
    followingId    String
    engagementType EngagementType
    createdAt      DateTime       @default(now())
    updateAt       DateTime       @updatedAt
    following      User           @relation("Followings", fields: [followingId], references: [id], onDelete: Cascade)
    follower       User           @relation("Followers", fields: [followerId], references: [id], onDelete: Cascade)

    @@id([followerId, followingId])
    @@index([followerId])
    @@index([followingId])
}

model Playlist {
    id          String   @id @default(cuid())
    title       String   @db.Text
    description String?  @db.Text
    userId      String
    createdAt   DateTime @default(now())
    updateAt    DateTime @updatedAt

    user             User               @relation(fields: [userId], references: [id], onDelete: Cascade)
    PlaylistHasVideo PlaylistHasVideo[]

    @@index([userId])
}

model PlaylistHasVideo {
    id         String    @id @default(cuid())
    playlistId String
    videoId    String
    playlist   Playlist? @relation(fields: [playlistId], references: [id], onDelete: Cascade)
    video      Video?    @relation(fields: [videoId], references: [id], onDelete: Cascade)

    @@index([playlistId, videoId])
    @@index([videoId])
    @@index([playlistId])
}
